# -*- coding: utf-8 -*-
"""custom model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13iUGI9wEgpE116WSk_CLi97tkgN_z_SK
"""

from google.colab import drive
drive.mount('/content/drive')

!cp "/content/drive/MyDrive/asl_alphabet_train.rar" "/content/"
!unrar x "/content/asl_alphabet_train.rar" "/content/asl_dataset/" -o+

import os
os.listdir('/content')

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import os

train_dir = '/content/asl_dataset/asl_alphabet_train/asl_alphabet_train'
img_height, img_width = 64, 64
batch_size = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=15,       # ±15° rotation
    width_shift_range=0.1,   # ±10% horizontal shift
    height_shift_range=0.1,  # ±10% vertical shift
    shear_range=0.1,         # Shear transformations
    zoom_range=0.1,          # ±10% zoom
    horizontal_flip=False,   # Don't flip - ASL isn't symmetric!
    validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(img_height, img_width, 3)),
    layers.BatchNormalization(),  # Add this
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3,3), activation='relu'),
    layers.BatchNormalization(),  # Add this
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(128, (3,3), activation='relu'),
    layers.BatchNormalization(),  # Add this
    layers.MaxPooling2D((2,2)),

    layers.Flatten(),
    layers.Dense(256, activation='relu'),  # Increased from 128
    layers.Dropout(0.5),
    layers.Dense(train_generator.num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

callbacks = [
    EarlyStopping(patience=5, restore_best_weights=True),
    ReduceLROnPlateau(factor=0.1, patience=3)
]

history = model.fit(
    train_generator,
    epochs=30,  # Increased from 10
    validation_data=val_generator,
    callbacks=callbacks
)

model.save('/content/drive/MyDrive/asl_model.h5')

# Accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.legend()
plt.title("Accuracy")
plt.show()

# Loss
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.legend()
plt.title("Loss")
plt.show()

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import os

# Load the uploaded file name
img_path = list(uploaded.keys())[0]

# Load and preprocess the image
img = image.load_img(img_path, target_size=(64, 64))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = img_array / 255.0  # Normalize

# Predict using the model
prediction = model.predict(img_array)
predicted_index = np.argmax(prediction)

# Get class labels
class_labels = sorted(os.listdir('/content/asl_dataset/asl_alphabet_train/asl_alphabet_train'))
predicted_label = class_labels[predicted_index]

# Display the result
plt.imshow(img)
plt.title(f"Predicted: {predicted_label}")
plt.axis('off')
plt.show()

print(f"Predicted Class: {predicted_label}")

!pip install opencv-python mediapipe

import cv2
import numpy as np
import mediapipe as mp
from keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array

model = load_model('/content/drive/MyDrive/asl_model.h5')  # Make sure the model file is in the same directory
class_names = sorted(os.listdir('/content/asl_dataset/asl_alphabet_train/asl_alphabet_train'))

from tensorflow.keras.models import load_model

model = load_model('/content/drive/MyDrive/asl_model.h5')

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save to Drive
tflite_path = '/content/drive/MyDrive/asl_model.tflite'
with open(tflite_path, 'wb') as f:
    f.write(tflite_model)

print("✅ Model converted and saved at:", tflite_path)

